{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Lab: PyTorch Way","provenance":[],"authorship_tag":"ABX9TyMZEm67X45lHHBG4N1x1g4I"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"rJMEfZojNS4z","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from mpl_toolkits import mplot3d"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3y1RzUhnNtkz","colab_type":"code","colab":{}},"source":["# class for ploting  \n","\n","class plot_error_surfaces(object):\n","    \n","    # Constructor\n","    def __init__(self, w_range, b_range, X, Y, n_samples = 30, go = True):\n","        W = np.linspace(-w_range, w_range, n_samples)\n","        B = np.linspace(-b_range, b_range, n_samples)\n","        w, b = np.meshgrid(W, B)    \n","        Z = np.zeros((30, 30))\n","        count1 = 0\n","        self.y = Y.numpy()\n","        self.x = X.numpy()\n","        for w1, b1 in zip(w, b):\n","            count2 = 0\n","            for w2, b2 in zip(w1, b1):\n","                Z[count1, count2] = np.mean((self.y - w2 * self.x + b2) ** 2)\n","                count2 += 1\n","            count1 += 1\n","        self.Z = Z\n","        self.w = w\n","        self.b = b\n","        self.W = []\n","        self.B = []\n","        self.LOSS = []\n","        self.n = 0\n","        if go == True:\n","            plt.figure()\n","            plt.figure(figsize = (7.5, 5))\n","            plt.axes(projection = '3d').plot_surface(self.w, self.b, self.Z, rstride = 1, cstride = 1, cmap = 'viridis', edgecolor = 'none')\n","            plt.title('Loss Surface')\n","            plt.xlabel('w')\n","            plt.ylabel('b')\n","            plt.show()\n","            plt.figure()\n","            plt.title('Loss Surface Contour')\n","            plt.xlabel('w')\n","            plt.ylabel('b')\n","            plt.contour(self.w, self.b, self.Z)\n","            plt.show()\n","            \n","    # Setter\n","    def set_para_loss(self, model, loss):\n","        self.n = self.n + 1\n","        self.LOSS.append(loss)\n","        self.W.append(list(model.parameters())[0].item())\n","        self.B.append(list(model.parameters())[1].item())\n","    \n","    # Plot diagram\n","    def final_plot(self): \n","        ax = plt.axes(projection = '3d')\n","        ax.plot_wireframe(self.w, self.b, self.Z)\n","        ax.scatter(self.W, self.B, self.LOSS, c = 'r', marker = 'x', s = 200, alpha = 1)\n","        plt.figure()\n","        plt.contour(self.w, self.b, self.Z)\n","        plt.scatter(self.W, self.B, c = 'r', marker = 'x')\n","        plt.xlabel('w')\n","        plt.ylabel('b')\n","        plt.show()\n","        \n","    # Plot diagram    \n","    def plot_ps(self):\n","        plt.subplot(121)\n","        plt.ylim()\n","        plt.plot(self.x, self.y, 'ro', label = \"training points\")\n","        plt.plot(self.x, self.W[-1] * self.x + self.B[-1], label = \"estimated line\")\n","        plt.xlabel('x')\n","        plt.ylabel('y')\n","        plt.ylim((-10, 15))\n","        plt.title('Data Space Iteration: ' + str(self.n))\n","        plt.subplot(122)\n","        plt.contour(self.w, self.b, self.Z)\n","        plt.scatter(self.W, self.B, c = 'r', marker = 'x')\n","        plt.title('Loss Surface Contour Iteration' + str(self.n) )\n","        plt.xlabel('w')\n","        plt.ylabel('b')\n","        plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"RNZsEWAqNw2S","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"c65edd10-ca90-4ab9-8bd4-a255bce0db14","executionInfo":{"status":"ok","timestamp":1578588684584,"user_tz":480,"elapsed":159,"user":{"displayName":"Abhishek Srivastava","photoUrl":"","userId":"04880920049240120907"}}},"source":["import torch\n","from torch.utils.data import Dataset, DataLoader\n","torch.manual_seed(1)"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f37ddf755b0>"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"VPHcsUZEN8bg","colab_type":"code","colab":{}},"source":["class Data(Dataset):\n","  def __init__(self):\n","    self.x = torch.arange(-3,3,0.1).view(-1,1)\n","    self.f = 1 * self.x -1\n","    self.y = self.f + 0.1 * torch.randn(self.x.size())\n","    self.len = self.x.shape[0]\n","  \n","  def __getitem__(self,index):\n","    return self.x[index], self.y[index]\n","  \n","  def __len__(self):\n","    return self.len"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UUfPLdQQOiNk","colab_type":"code","colab":{}},"source":["dataset = Data()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"jRwozPliOkZ6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":296},"outputId":"e54a4aec-fd94-4c3b-d18b-27064a903834","executionInfo":{"status":"ok","timestamp":1578589004876,"user_tz":480,"elapsed":399,"user":{"displayName":"Abhishek Srivastava","photoUrl":"","userId":"04880920049240120907"}}},"source":["plt.plot(dataset.x.numpy(),dataset.y.numpy(),'rx',label='y')\n","plt.plot(dataset.x.numpy(),dataset.f.numpy(),label='f')\n","plt.xlabel('x')\n","plt.ylabel('y')\n","plt.legend()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7f37dd9c7e48>"]},"metadata":{"tags":[]},"execution_count":6},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYAAAAEGCAYAAABsLkJ6AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO3dd3iUVdrH8e8JafTeJCBdQUDRBLtr\nREABFVBDsIsIRFxFXZGOdI0KVkAQRWwBNSAgL9UBdJWlqEiXIihFqnQSUs77xySmS0h7ZjK/z3Xl\nCpk8M3NP1j33c+7TjLUWERHxPX5OByAiIs5QAhAR8VFKACIiPkoJQETERykBiIj4KH+nA7gQVapU\nsXXr1nU6DBERr7J27drD1tqqmR/3qgRQt25d1qxZ43QYIiJexRizO7vHVQISEfFRSgAiIj7KsQRg\njKltjHEZYzYZYzYaY552KhYREV/k5BhAIvCctfZHY0xZYK0xZrG1dtOFvEhCQgJ79uwhLi6ucKIs\nAMHBwYSEhBAQEOB0KCIif3MsAVhr9wP7U/590hizGagFXFAC2LNnD2XLlqVu3boYYwoh0vyx1nLk\nyBH27NlDvXr1nA5HRORvHjEGYIypC7QE/pfN73oaY9YYY9YcOnQoy3Pj4uKoXLmyRzb+AMYYKleu\n7NE9FBHxTY4nAGNMGeBLoK+19kTm31trJ1trQ621oVWrZpnGmvoahRxl/nh6fCLimxxNAMaYANyN\n/yfW2lgnYxER8URHT5/jxTkbORGXUOCv7dgYgHHfFk8FNltrxzkVh4iIJ7LWMnvUZEaeC+FEkuGG\nhlW4tWl1cLlg9Wro1y/f7+FkD+B64EHgFmPMzylf7Qv1HaOj3X+89Fwu9+MiIh7i9yNneOj9VTxz\nOoSL927n62uC0hr/iAgICyuQ93FyFtB3QNEWx8PC3H+8mTMhPDztjzlzZp5fcujQoVSqVIm+ffsC\nMGjQIKpVq8bTT2tZg4hcmISkZKZ+9xuvL/kVfz8/Rt51GfefLYlf164QFQUTJ6a1XwXAq/YCyrfw\ncPcfLyKiwP6Y3bt3p0uXLvTt25fk5GRiYmJYtWpVAQYtIr5g3R/H6B+7ns37T9DusuoMv7MZNcoH\nA3Xd7dXIkTBkSIE1/uBrCQDcf7wC/GPWrVuXypUr89NPP3HgwAFatmxJ5cqVCyhYESl2oqPd1YiU\ntudUfCKvvTCBD4PqU7V8MJMeuIrbmtVIq/WHhblvVocMcX8PDy+wJOD4NNAi53Jl/GNmHhPIgx49\nejBt2jQ++OADunfvXgBBiojXye0YY2op2uViyaYDtB27iGlB9bh/4xIWh/qlNf4REeDvn1amHjEi\nrYJRAO0W+FoCSF/zL8A/ZufOnVmwYAGrV6+mXbt2BRSsiHiVdA07kPOAbXg4Bz+aQZ+Jy+gxfQ1l\n9v/BF1eXZORzd1Hu/q4wdGhaO5WYmLFMnVrGXr26QEL2rRLQ6tU5/zHz0aUKDAwkPDycChUqUKJE\niQIKVkS8Si7GGJOTLTPW/MGYlQnE1w/luRUf0av1JQR26eW+IHN5Ort2qQBLQL6VALKbN1sAf8zk\n5GRWrlzJ559/nq/XEREv9w9jjNsPnmRg7AZW7TrKNRX9GPPRAOrf3wUmToBbbnZfVEi1/pz4VgIo\nBJs2baJjx4507tyZRo0aOR2OiDgp8xjjgQPER3RlQnIIE5ftoGRgCaLL7ufekX0xc+emNfKdOoEx\nMGtW2mPpp6wXEiWAfGratCk7d+50OgwRcVr6McaURnxV1AsM4Cp2VDzLnZdfxNCKf1Hl7qfdPYT0\npejIyLR/p34vgPL0+SgBiIgUhHRjjMfPJPDSX5X5rNMwQpJOM23Ba9wceIO7VzBvXtZG/d13s76e\nSkAiIg7LNG8fyH4/nn79sNYy/5f9DJuzkaOn43n8xno806YxpUpuKJSFXPnlW9NARUQuVC6nd+47\ndpbHp6+hz6c/UqN8EHOevIFBHZpS6r/fFvjao4KiHoCIyD85z/TOpGTLh9/v4rVFW0m2MLhDEx65\nri7+JfyyHRcoisHd3FIPoAC8+eabNGnShPvvv9/pUESkMKSf3hkV9XfjvWnfCbpM+C8j5m0irF4l\nFj1zEz1urO9u/OGf1x55APUACsCECRNYsmQJISEhTociIoUh0/TOszfdzBsJFzHl251ULBXAm91a\nckeLmllP/yuktUcFRQkgn3r37s3OnTu5/fbb6d69O88884zTIYlIQcpUxvm2+U0Mit3N7+XO0jW0\nNgPaX0qFUoFOR5knxSoBDJ+7kU37shwrnC9NLyrHsDsuy/H3kyZNYsGCBbhcLqpUqVKg7y0iHiCl\njHMk7DpGz/iZ2J/iqV+jOp+V2Mm193RwOrp80RiAiAjkuJuntfBluUbcOm45c3/Zx1O3NGR+0Eau\nve6yLNd62+mCxaoH8E936iIi/yibEwN3PfYkg3q/yn8/X8dVF1dkbJfmNK5eFgJCC/x0QScUqwQg\nIpJn6aZ7JvR+ginf7+aNyGgCT/sxqlNT7mtVBz8/k+XawjiqsagoAYiIpAoP5+de/6H/3tJsCWvF\n7U1r8OKdl1G9XHC21xbWUY1FRWMABWDXrl0aABbxcqfiE3lxwkI6JzTlWLVaTF78BhNrnci+8YdC\nOV2wqKkHICI+b/GmAwyduZY/zybx0MWB/Kf7bZRtVyHnVbsevsI3t9QDEBGfdfBEHFEfr+Xx6Wso\nl3CWL68pyfAn2lE2OOCfV+16+Arf3HK0B2CMeR/oCBy01jbL6+tYa7OuwPMg1lqnQxCRdJKTLZ+t\n/p2X/m8L8YnJPN/uEnreVJ+AEpnuiXNatevhK3xzy+kewDTgtvy8QHBwMEeOHPHYRtZay5EjRwgO\nzqGOKCJFatuBk0QM/ZxBszbQvFZ5Fva9iT7hDQlYsdzr5vHnl6M9AGvtCmNM3fy8RkhICHv27OHQ\noUMFE1QhCA4O1j5BIg6LS0hiwrIdTFy2ndJ+pXl1+RTubvsUpkppr53Hn19ePwgcEBBAvXr1nA5D\nRDxVdDT/a3AlA3b5s/PQaTq3rMXgCkepfLA6dO3q1fP488vjE4AxpifQE6BOnToORyMi3uT4mQTG\nlmxBzOp4apc8x/Turbhp7waI6Opu8KtX9+p5/Pnl9BjAeVlrJ1trQ621oVWrVnU6HBHxAtZa5q7b\nR+txy/l8fzK96vqzaOLj3PTxWxlLPV4+jz+/PL4HICJyIfb8dYYhszfg2nqIFiHl+bB7GJddVB72\nPZZ2tw/FYh5/fjk9DfQz4GagijFmDzDMWjvVyZhExEtkOqw9MSmZac+8wmslL8UEBTG4QxMevb4e\nJZYvg+ExEBubdrd/4EDO8/iVAIqGtbabk+8vIl4s3e6dGxpfyYAPv2d9qWbcsvsnRj54LbVurO8u\n63TqBMbArFkZ7/YjIzO+nhfO488vlYBExDuFh3Pm0xm88coXvNfiNBXPnODta6vSoe11mPSzeyIj\n3V8+frefHSUAEfFKy389xOCf4I8W7en28wL6h1WhfLf73L9Mv0vniBFZn+yDd/vZUQIQEa9y+FQ8\no+ZtYvbP+6hf2jDj6zFc3bk1THwbbrnJfVH62T1q7HOkBCAiXsFayxdr9zB6/mZOxyfydAN/nhj8\nCEExn6Y18jnV+31sdk9uKQGIiDMyzeIBoFcv9/d33017zOXit5XrGFj5Gn7YeYTQlKMZG304EVIb\nf3B/Tx3YVb0/V4ynbqKWndDQULtmzRqnwxCRgpB5T/1sZuycW/oNU8Z+xBut7iEowJ/+7S+lW1i6\noxklV4wxa621oZkfVw9ARJyR3bm6s2e7fxcRwdpezzPwYDm2ht5D+8tqMOyOHI5mlDzz+K0gRKQY\nS3+ublQUhIdz8tobGPr4S9yT0IQTlaox5aFQJuxdSvW1P2R8rsvlc9s3FzQlABFxTqZzdRfGLKbN\n2MV8lFSNh0scZPH0p2lzYFPaoq/U/XpSy0dhYc7G7+VUAhIRZ6QbA/jzymsZVuE6Fv58jksP72Zi\nh8a07PwYtKmfNk6QuVykmT35ph6AiBS+6Oisu23GxJDcpQsflaxPm3HLWXbU8sKZTcwt8QstO9/q\nvibzLJ5M5SLJH/UARKTwpdu3J3XGz6/frKT/Yy/x4+wNXN+wMqM7NadulduzPjd1Pn+mcpEWeOWf\nEoCIFL50M37iej/BO6v+ZNI9YyhzrgTjIprTuWUtjPmHqZ2Zp4xqgVeBUAIQkaIRHs4Pvfox8EB5\nfmvZii4tazG4Q1MqlQ48/3NXr9b2zYVACUBECt2xM+cYM/UbZiY2pU6lOD76v1e4sd0wyE3jD9Cv\nX9bHVALKNyUAESlY6bZ4sNYyZ90+RsxYw7EkQ+8GQTz9aCdKtqukEo4HUAIQkYKVMuD7x4cxDP6z\nLMt/PcTlB3bx0aX+NO3Vx32NSjgeQXsBiUiBSkxK5oPpSxi34RQmwJ/nf/iMh4Y9TolbbnE6NJ+V\n015AWgcgInmXaX7/hr3H6fTyAkZvTeC6wDMsntCDR//VSI2/h1IJSETyLqXcc+bTGYw/V4Op3/5G\n5TPHmFDjNLePH4TpG6U5+x5MPQARyZ3sVvMCyyJ60Xb270z59jciN7tYUucQ7ccPwsyc6T6OMXUL\nh2yeK85SAhCR3Mm0IduhBd/w1ISlPFL2WoLLlmHmJy8w5vJSlE8+l/OcffEoGgQWkdxzubAREXze\ncyijz1TjbHAZ+tQPoPfghwnq9bg2afNQOhBGRPJtZ7MwBvZ4k5VJ5WgVfIIx1wXTsHuktmjwUo6W\ngIwxtxljthpjthtj+jsZi4jk7FxiMm8t3cZt45ezMc6fMSV2EvPe0zScN1PlHi/mWAIwxpQA3gFu\nB5oC3YwxTZ2KR0TSSTfgu3b3UTq+9S2vLf6VNlu/Z2m7ytw3+t/4zZwBsbFZnxsenv3WDeJxnOwB\ntAK2W2t3WmvPATHAXQ7GIyKpwsI4cf/DDHlnIfdM+oFTx08zde5LvHN9ZardljKnX3f7Xs/JMYBa\nwB/pft4DXJ35ImNMT6AnQJ06dYomMhEft6BqE4Y9PolDu8/xqP8Bnnv3RUp/+lHWur7m93s1j58G\naq2dbK0NtdaGVq1a1elwRIq1/cfP0nP6Gnp/vJZKlcoyK3ATQ8c+TunHu6uhL4acTAB7gdrpfg5J\neUxEikpKrT852TL9h120GbeCFVsOMKDkn8xplsDl776adgKXFnIVO04mgNVAI2NMPWNMIBAJzHEw\nHpHiLbuVvP7+bHnkCe5+eQFDv9pIyzLJLIp5nl5ljxMQ2dVd49dq3mLLsQRgrU0EngQWApuBmdba\njU7FI1LsZVrJG7fkG15Z9Csdu73C7j+PMb7EdqZHP0Sdqe9AYqKmd/oArQQW8SUpZ+t+3+sFBh6p\nyK7yNbjnqhAG/fIVFUcNc5d7RoxwOkopYNoOWkT4q9X1/OfxV7gvsQm2fAU+6XE1r1Y5SsVJb6nW\n74OUAESKo0z1fmstsz9ZTOvh85idWJEov30snPZvrp8zPW3rBtX6fY72AhIpjlLr/TNn8sflVzNo\n6nJWHEnmikN/MLZzM5rceRe0aQgdO8LIkdnX+jXts9hTAhApjsLDSYyZwfsj3mfc1SfxP3eO4Ynb\neODBq9NO5woPh3nzsg7sanGXz1ACEPF20dHuO/50jfYvs5fQf/UxNl0dya3bVjKyaRA1Rw7O+lw1\n9j5NYwAi3i7d9M7T8YmMnLiQTt+f5bANYNKSt5jS1FBz0huq60sW6gGIeLuUur3r2VEMbteHvQTx\nQOnj9Ht3IOU++dD9+1u0T79kpR6AiJc7eDKOJ/eX59F2z1Lq8J984b+RUSX3pTX+oIVcki31AES8\nVHKyZeaaPxgzfzNx8Yk8t/ZLel1Tm8BJE7K/01e9XzJRAhDxQtsPnmLgrPWs+u0orSr6Mfbj/jSY\n8mZKuedmlXskV5QARDxVNrN74ntFMSm4Ie+UaUpwgB8v392ce98bjV/r6zSXXy6YxgBEilJ2O3K6\nXO7HM8u0edvq2CV0sFcwvuSltK1qWPLcv+h6agd+sbEQGZnxuTqWUXJBCUCkKGVq1FM3ZyMsLOu1\nKXfyxx94hEED3+feVfGcvag2H1wZxNujH6TaK2NU6pF8UQlIpCillmciIiAqyr35Wg4NuLWWBVUu\nZdiDr3M4sQSP+e/n2QGPUDrIHzZEubdwGDJEjb/kmRKASFELD3c3/qkNeOrUzHQN+b75Sxn6w0GW\nJJSj6ZH9vFf9JC3efRXaNHBfMHFi2u6dmt0jeaQSkEhRc7kyNuD+/n+XhZKSLdOmLaLNkr/4LqEM\nA/8Xw5zIS2kx6gV3T6FTJ+jcWbt3SoFQD0CkKKXW/FPLPuEpK3QHDGBzr2fpf3d/1tky3FSzNKMT\nt1B7aPeMs3tSB3s140cKgE4EEylK2UztjFvyDW989ztT4ipT7sxJhpU9xJ2jnsIY42CgUpzkdCKY\negAiRSnT1Mzvth1m0E+G3XFVuffXFQy8rLT7dK5bW+iOXgqdEoCIA46ePseorzcR++Ne6pYyfDr/\nZa57Y3jKSt4bNb1TioQGgUWKkLWW2B/30Pq1Zcz5eR9PhjdkQdDGtMYftHGbFBmNAYgUlkz1/t1H\nTjPo/RV8dySZlnUqMLZLcy6tUc7hIMUXaAxApKilrPpNiJnBVP+LeX3hFvzjzjLy8nLc9+B1lPDT\nIK84SwlApLCEh7Nuymf0j9nK5spnabtrLSMevp4at7d2OjIRwKExAGPMvcaYjcaYZGNMlm6JiLc7\nFZ/I8Lkb6fS/eI5WrsGk2NFMbpyoxl88ilODwBuALsAKh95fpNAs2XSAtuOWM+37XTwQ4s/i6U9z\nW+St7lW/WrErHsSREpC1djOghS5SrBw8EcfwuZv4ev1+GlcvwxeXBHFVr25ZV/1qeqd4CI8fAzDG\n9AR6AtSpU8fhaESySk62xIx6j7HnLiIeP55r05he/2pAYJ8o6NJF2zaIxyq0BGCMWQLUyOZXg6y1\nX+X2day1k4HJ4J4GWkDhiRSI7QdPMTB2PavOXMQ1+zYzJqIl9Vs3cpd6YmPdDX562rlTPEihJQBr\n7a2F9doijoqOJv6qUCbaECa4dlAysATRzQK5969tmEdfPu8+/yKe4rwJwBjzb+Bja+1fRRCPiGfJ\nZvO2VcllGTBjOzsqneXOyy9iaMW/qPJgV3eDX726DmoRr5GbWUDVgdXGmJnGmNtMAYzcGmM6G2P2\nANcCXxtjFub3NUUKRbojHI+fTWDA2wuJOFaH+CpVmbbgNd7cPCut8YeM+/xrxo94uPP2AKy1g40x\nQ4C2wKPA28aYmcBUa+2OvLyptXYWMCsvzxUpUuHh2BkzmN/vFV5sfYwjyf70rB9I3+7tKOX/U9rd\nPmS/z7/KQOLBcrUOwLo3DPoz5SsRqAh8YYyJLsTYRBy379hZevxelj6t+1Bj/27mBG5kYO92lPrv\ntxnv9mNiMjb22tBNvEBuxgCeBh4CDgPvAc9baxOMMX7ANqDfPz1fxBslJVs+/H4Xry3aSnJSEoNX\nfsojNzbAf9JEqBQIY8dmvdtPPa0rlWb8iIfLzSygSkAXa+3u9A9aa5ONMR0LJywR52zcd5yBsetZ\nt+c4N1fxY+Q7/6H2+xNS9uoPh44d3aUfze8XL6ftoEVSnD2XxBtLtzHl251ULBXA0Dsu444FH2Na\nZZwFhMvlbuz7qfMr3iGn7aCVAESAb7cdYtCsDfx+9AwRoSEMbN+ECqUCnQ5LpEDoPACRbBw5Fc/o\nrzcT+9Ne6pcyfPb4NVzboLL7l7rTl2JOR0KKT7LW8uXaPdw6bjlzf9nHU/X9mT+hB9f+/ov7ApfL\nPbAbFuZsoCKFSD0AKT6yWbWb3V38rsOnGTR7Pf/dfoSrLq7I2C7NaVy9LDT6xN3oaysH8RHqAUjx\nkW7VLuD+3rEj+LvvcxKSkpmwbDvtxi3jlx0HGdWpGZ/3utbd+IO7sY+Kcs/wiYpS4y/FnnoAUnyk\nTsdMfxc/ciSMHcvP9VrQf3cgW/48ye2/rebFR26k+jUXZ3y+y5VxcZfm8UsxpwQgxUv6u/ghQzjV\n5yleDb6MD1eepbo5yeTFE2n76oCsDXtqzV9bOYgPUQlIvFN0dNbN1lwu6NXr77v4xV//QJuxi/jw\nj0QeLnGQxePvp22Ha9xjApmfGxOT8+EtIsWUEoB4p+zq/Z06wYwZHJgeQ1Tju3i8TV/K7/ud2Aq7\neXFKf8q+8B93cvD3z/rc2Njst3LQFFApxlQCEu+UTb0/OTKST6+/m5dXJhKfdJDn211Czx+3EjBs\nKMydm7G0M2CAZvyIz1MPQLxXunr/tt7PEnHFwwzelEDzkPIs7HsTfcIbEpCUmNb4pz5n5kxITNSM\nH/F56gGI93K5iJv8HhMGTGJiXA1K7/uLV++9nLuvrMXf5xZlV8JJbewjIjTjR3yaegDinVwuVj41\nhPZ93uPN5BA6hgSxdNq/uefENs57aF36GT8jRqSVknSCl/gYJQDxOsfPJNB/2V4iOwwgISiY6d1b\nMf7p26g8fWruZu2sXq3DW0TQbqDiRay1zPtlP8PnbuKvM+focWM9+rZuTMnAEk6HJuLRtBuoeK/o\naPY0u4ohB8ri2nqI5rXKM625odn6uXC7pmmK5JVKQOJZMi3wSkxK5r1zVWmz9Bgrtx9icIcmzGp6\njmY9IrVTp0g+KQGIM3Jaybtjx98Dshv2HqfzywsZdaoa15ROZPGnz9Fj8TT8I7tq3r5IAVAJSJyR\nupI3tSFPNzPnzD1def2VL5na4jQVz5zg7Wur0iEyAsPGv/f4UeMvkn+O9ACMMa8YY7YYY34xxswy\nxlRwIg5xUPqVvEOH/t34L6/VjHY/weQWt3PvukUsLb+Njt3aYJYty7hTp6ZsiuSbUyWgxUAza20L\n4FdggENxiJPSreQ93Pvf9D1QgYffX0VAfBwzvh7DS2EVKD/pbRg3TvP2RQqBIyUga+2idD+uBO5x\nIg5xmMuFnTiRLwa+weiT1Tm9bh9PNfDniSGPEvzZJ2mrczt2dJd+spu3r1KQSJ55wiBwd+D/nA5C\nClF2A77jxvHbA49z3/PTeT6pAQ1rlGP+FwN5dk1sWuMP7u/z5rn37klPO3WK5Fuh9QCMMUuAGtn8\napC19quUawYBicAn//A6PYGeAHXq1CmESKXQZRrwPbf0G6Z89SNvPDieoDN+jOrUlPta1cHv6uDs\n7+q1T49IoXBsJbAx5hGgF9DaWnsmN8/RSmAvkNPB7DExEBvL2l7PM/BgObZWqk375jV48Y7LqFYu\n2Ll4RXyAR60ENsbcBvQD/pXbxl+8RA7TO09+OoNXKrfio4Rq1KiUwJSHQmnTtLrT0Yr4NKfGAN4G\nygKLjTE/G2MmORSHFLRspncufOtT2nwXx0dJ1dxHM05/mjYHNjkdqYjPc2oWUEMn3leKSMr0zj/H\nT2DYk+NZ+PM5Lj3yOxPbN6Jl58egTX0duC7iATxhFpAUM8nffMNHy7Zya5/3WZZQhhfObGJu5CW0\n7Hyr+wJtvyziEbQVhBSorXOWMmDWen687iGub1iZMTVPc/Ej0dB5ZsYLNbNHxHFKAFIg4hKSePub\n7Uz6/ixlQxoxrvPldG6ZcjSjFm2JeCQlAMm3H3YcYeCs9fx2+DRdrgxhcIemVCodmHaB7vZFPJIS\ngOTZsTPnGDN/MzPX7KFOpVJ8/NjV3NCoitNhiUguKQHIBbPWMmfdPkbOWMNf+BN1cwOeuqWR+2hG\nl8td7tE2DSIeT7OAJKucDmuJjuaPo2d45IPVPB3zM7XKBjI3dggvBO1Pa/wjInRSl4iXUAKQrFJX\n86YmAZeLxDvu5L1zVWk7fgWrdx1l2B1Nib0miKY3h2XZ01/1fhHvoBKQZJV+NW9UFBtmzqd/32ls\nOBVM66qWEY/dTK2fVkLXlKMZq1fXSV0iXkg9AF/xD2WdbIWHc6Z3H0Z/t5c7O73IgZLlmXB5IO+9\n9BC1xo1Nu9sHndQl4qWUAHxFNmUdOnYE/0ydwJSk4Jq5hLZH6zKlVRciNy9jSZgf7bu1waSc4EVU\nlPt6ndQl4rWUAHxFdmfwjhwJY8dmSAqHHurBU6dr8+iP8QTVqMbnva9lTN8OlL+/q/toxvR3+zEx\nGWv+2uJBxKtoDMCXpDuDlyFD4NlnoWVLiIjA9o7i86UbGP3wm5yNT+aZBgH0frQ1Qf4loG44DBjg\nThxz56Yt7IqIgMjIrO+hcQARr6AE4Etcrox38CmN9c7ezzBwu2HlTY/RKqQSY7o0o2G1shmfm5iY\n1viDzuUVKQaUAHxF6hz91JJNeDjnIrvx7pMv8dbZpgRdbBj73Qd0bfsEfpkbf8h+YZfu9kW8mhKA\nr1i9OkO9fm39KxjQYwK/ng6iQ0gJhj12M9XWlNNcfhEfogTgK1Lu4E/EJfDKgq18/L/d1DSGqS2D\naN01m336lQBEij0lAB+yYMOfDJuzgUMn43n0uno817YxpYMy/Segso6Iz1ACKI6io93z/lMa8v3H\nzzJs6nIWHUyiSc1yTH4wlMtrV3A4SBFxmhJAcZSy6Ctpxgw+KVmf6HkbSYyPZ0DTMnR/+HoCSmj5\nh4goARRP4eFsmRrDgI/X81O1s9y4Zz2ju4VRp0NrpyMTEQ+iW8FiJi4hiVcWbqHjynh2V7uY8XNf\nZXq9M2r8RSQLJQBvl26Tt++3H+a211fwjmsHnc7uZunHfel8942YSdqkTUSyUgnI24WF8deDjzK6\n3yS+2JdE3VKGT+aM5vp9m2DWrIzbNmh+v4ik40gPwBgz0hjzizHmZ2PMImPMRU7E4e2stcyu0JjW\nj77D7D3xPOG3lwUTenD9jc3TGn/QJm0iki1jrS36NzWmnLX2RMq/nwKaWmt7n+95oaGhds2aNYUe\nnzf4/cgZBs1ez7fbDnNF7QqM3b+CJqMHuvf5GTHC6fBExIMYY9Zaa0MzP+5IDyC18U9RGij6LOSl\nEpOSmbxiB21fX85Pvx9j+J2X8WWTeJq8O06HsojIBXFsDMAYMxp4CDgO5FiYNsb0BHoC1KlTp2iC\n8wSZFnMB/PJEP/qXuoJN/uW5tUl1Rna6jJpTJ2a/TbPq/SJyHoXWAzDGLDHGbMjm6y4Aa+0ga21t\n4BPgyZxex1o72Vobaq0Nrd06C4kAAArASURBVFq1amGF63nSneB1Oj6RkRMX0qnMjRyOT2bSFYFM\neegqav64Mq3ko3q/iFwgR8YAMgRgTB1gvrW22fmu9bkxAJcL17OjGNyuD3sJ4oHa/vRrFEC5+7u6\nD3aZOFF3+iJyXjmNAThSAjLGNLLWbkv58S5gixNxeLKDJ+MYsb8889o9S8PDv/NFjZOE9knZkz/9\nqV5q/EUkj5waA3jJGHMJkAzsBs47A8hXJCdbZq75gzHzNxMXn8gza2PpfU0IQZMmQOsw90XZnOol\nInKhHEkA1tq7nXhfT7f94CkGzlrPqt+O0qqiH2M/7k+DKW+6G/hbboZOncAYLfASkQKhlcBOi44m\n/qpQJtnavOPaTnCAHy9fFsi9n43HL7XxB/f31APYdS6viBQAJQCHrW54JQNmbmd7xbN0bFGToZWO\nUe3Brtnf1b/7btYXUAlIRPJICcAhx88m8PKCLXy6Kp5aNUP44KvXCA+8XjN7RKTIKAEUMWttytGM\nGzl8Kp7HbqjHs20aUzp5pWb2iEiRUgIoQvuOnWXoVxtYsvkgTWuW472HQ2kRUsG9dYNm9ohIEVMC\nKAJJyZbpP+zi1YVbSbKWge0vpfv19fAv4edu/NPP5NHMHhEpIkoAhWzz/hP0j13Puj+OcVPASUZf\nU5XaNzVIuyAmBrp00cweESlySgCFJC4hideXbGPKtzupUDKANyKv4M6jWzFd083wcbkgNtb9c3oq\nAYlIEVACKATfbTvMoA9WsDs5iHuvCmFg+yZULB0Irl/dd/sREdrLR0QcpwRQgI6ePseoeZuI/Wkv\ndUsF8+kXL3Fdu+FQOjBjrb96dc34ERHHKQEUAPtyNLNCWjJyh+VkXCJPhjfkyRJ7Cd7bJOvdPmjG\nj4h4BCWAC5XpoJbdR04z6FRdvlt/jpbl/Rjb8wYu3bwWIrpmvdsHzfgREY+hBHChUg5qSYiZwVT/\ni3l94Rb84/wYWekA94/rj9/Z3jnf7R84kLGx14wfEXGQEsCFCg9n3ZTPGBCzhU2Vz9Ju1xqGP3wD\nNW6/B87tOv/dfuqGbuleT42/iDjBkUPhvdWp+ESGz91I5//Fc6RyTSbFjubdxknUuL111tW8MTE5\n3+2LiHgA9QByaenmAwyZvYH9J+J4IMSf50dHUa7HI+7GvkIFGDtWd/si4lWUAM7j4Mk4hs/ZxNfr\n99O4ehm+uCSIq3p1y9jYd+zoLv2oti8iXkQJIAfJyZYZKUczxicm81ybxvT6VwMCx72atbQzb17W\n0o7u9kXEwxlrrdMx5FpoaKhds2ZNob/P9oOnGBi7nlW7jnJN/UqM6dyc+lXLFPr7iogUBmPMWmtt\naObH1QNIJz4xiYnLdjDBtYOSgSWILr2XexuWxKRv/F0u991+v37OBSoiUgA0CwggOppVsUto/8a3\nvL5kG7c3r8HSq/2J2LPWvXmby+W+LnU7h7AwZ+MVESkAPt8DOH42gZdKXc5nq+IJKXmOaY+GcfO+\njWkreSMjtXmbiBRLPpsArLXMX/8nL87dyJFTifS42J9nR3SnVNJjWRv6qCht3iYixY7vJYDoaPY2\nu4qhB8uxdMtBmtUqxwfNDM22roXHH8va0Ou4RhEpphwdAzDGPGeMscaYKkXxfknJlverXUGbpcf4\nfttBBndowuymCTTrEQn+/hkbepcr4xbOI0a4v0dEpI0JiIh4Mcd6AMaY2kBb4PeieL+N+44zIHY9\nv+xJ4F81SzHqnWepXeJed2M/YED2K3m7dNHmbSJSbDlZAhoP9AO+Kuw3ese1nXGLf6ViqQDe7NaS\nO1rUxJz4Ia3ck5iY+4ZeJSARKSYcSQDGmLuAvdbadcaY813bE+gJUKdOnTy930UVgrnnyhAGtL+U\nCqUCs9b1s5vZo4ZeRIq5QlsJbIxZAtTI5leDgIFAW2vtcWPMLiDUWnv4fK9ZICuB09f1Uw9m16Es\nIlKM5bQSuNAGga21t1prm2X+AnYC9YB1KY1/CPCjMSa7ZJE/0dFZB2xjYty1fW3TLCI+rshLQNba\n9UC11J8vpAdwwVJO78pwtx8bm3ZaVyqVe0TEBxXvdQCpd/daySsikoXjewFZa+sWyt1/qvDwtJW8\nUVFq/EVEUjieAApd5hk/WsQlIgIU9wSglbwiIjkq3glg9WodzC4ikgOdCCYiUswV+ToAERHxbEoA\nIiI+SglARMRHKQGIiPgoJQARER/lVbOAjDGHgN15fHoVoPBWHBe94vR5itNnAX0eT1acPgvk/vNc\nbK2tmvlBr0oA+WGMWZPdNChvVZw+T3H6LKDP48mK02eB/H8elYBERHyUEoCIiI/ypQQw2ekAClhx\n+jzF6bOAPo8nK06fBfL5eXxmDEBERDLypR6AiIikowQgIuKjfCoBGGNGGmN+Mcb8bIxZZIy5yOmY\n8soY84oxZkvK55lljKngdEz5YYy51xiz0RiTbIzxyml6xpjbjDFbjTHbjTH9nY4nP4wx7xtjDhpj\nNjgdS0EwxtQ2xriMMZtS/jt72umY8soYE2yMWWWMWZfyWYbn+bV8aQzAGFPOWnsi5d9PAU2ttb0d\nDitPjDFtgW+stYnGmJcBrLUvOBxWnhljmgDJwLvAf6y1XrXvtzGmBPAr0AbYA6wGullrNzkaWB4Z\nY24CTgHTrbXNnI4nv4wxNYGa1tofjTFlgbVAJ2/838cYY4DS1tpTxpgA4DvgaWvtygt9LZ/qAaQ2\n/ilKA16b/ay1i6y1iSk/rgRCnIwnv6y1m621W52OIx9aAduttTutteeAGOAuh2PKM2vtCuCo03EU\nFGvtfmvtjyn/PglsBmo5G1XeWLdTKT8GpHzlqS3zqQQAYIwZbYz5A7gfGOp0PAWkO/B/Tgfh42oB\nf6T7eQ9e2sAUd8aYukBL4H/ORpJ3xpgSxpifgYPAYmttnj5LsUsAxpglxpgN2XzdBWCtHWStrQ18\nAjzpbLT/7HyfJeWaQUAi7s/j0XLzeUQKkzGmDPAl0DdTRcCrWGuTrLVX4O75tzLG5KlM51+wYTnP\nWntrLi/9BJgPDCvEcPLlfJ/FGPMI0BFobb1gMOcC/rfxRnuB2ul+Dkl5TDxESr38S+ATa22s0/EU\nBGvtMWOMC7gNuOAB+2LXA/gnxphG6X68C9jiVCz5ZYy5DegH3GmtPeN0PMJqoJExpp4xJhCIBOY4\nHJOkSBk4nQpsttaOczqe/DDGVE2d9WeMKYl74kGe2jJfmwX0JXAJ7tkmu4He1lqvvEszxmwHgoAj\nKQ+t9NYZTQDGmM7AW0BV4Bjws7W2nbNRXRhjTHvgdaAE8L61drTDIeWZMeYz4Gbc2w0fAIZZa6c6\nGlQ+GGNuAL4F1uP+/z/AQGvtfOeiyhtjTAvgQ9z/nfkBM621I/L0Wr6UAEREJI1PlYBERCSNEoCI\niI9SAhAR8VFKACIiPkoJQETERykBiIj4KCUAEREfpQQgkg/GmLCUMxmCjTGlU/Zn9/rtk8U3aCGY\nSD4ZY0YBwUBJYI+1dqzDIYnkihKASD6l7P2zGogDrrPWJjkckkiuqAQkkn+VgTJAWdw9ARGvoB6A\nSD4ZY+bgPgGsHu5jBz36nAmRVMXuPACRomSMeQhIsNZ+mnIu8PfGmFustd84HZvI+agHICLiozQG\nICLio5QARER8lBKAiIiPUgIQEfFRSgAiIj5KCUBExEcpAYiI+Kj/B5gjOxb5u5BIAAAAAElFTkSu\nQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"ftTX00UfPLdc","colab_type":"code","colab":{}},"source":["from torch import nn, optim\n","\n","class linear_regression(nn.Module):\n","  def __init__(self,input_size,output_size):\n","    super(linear_regression,self).__init__()\n","    self.linear = nn.Linear(input_size,output_size)\n","  def forward(self,x):\n","    yhat = self.linear(x)\n","    return yhat"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"TX2PaEXfQIJa","colab_type":"code","colab":{}},"source":["criterion = nn.MSELoss()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WKH05dimQMAK","colab_type":"code","colab":{}},"source":["model = linear_regression(1,1)\n","optimizer = optim.SGD(model.parameters(),lr = 0.01)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"sfjhaA4BQX0I","colab_type":"code","colab":{}},"source":["trainLoader = DataLoader(dataset=dataset,batch_size=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3AkPiGRsQfYv","colab_type":"code","colab":{}},"source":["model.state_dict()['linear.weight'][0] = -15\n","model.state_dict()['linear.bias'][0] = -10"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ophU7nASQs7t","colab_type":"code","colab":{}},"source":["get_surface = plot_error_surfaces(15, 13, dataset.x, dataset.y, 30, go = False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"L7EWWZ42QvpU","colab_type":"code","colab":{}},"source":["def train_model_BGD(iter):\n","  for epoch in range(iter):\n","    for x,y in trainLoader:\n","      yhat = model(x)\n","      loss = criterion(yhat,y)\n","      get_surface.set_para_loss(model, loss.tolist()) \n","      optimizer.zero_grad()\n","      loss.backward()\n","      optimizer.step()\n","    get_surface.plot_ps()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"fqXkIE0WRMb4","colab_type":"code","colab":{}},"source":["train_model_BGD(30)"],"execution_count":0,"outputs":[]}]}