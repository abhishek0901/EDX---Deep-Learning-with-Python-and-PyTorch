{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Lab: Mini-Batch Gradient Descent","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"gljngOqdWffA","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","from mpl_toolkits import mplot3d"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EMkxffAIX53m","colab_type":"code","colab":{}},"source":["# The class for plotting the diagrams\n","\n","class plot_error_surfaces(object):\n","    \n","    # Constructor\n","    def __init__(self, w_range, b_range, X, Y, n_samples = 30, go = True):\n","        W = np.linspace(-w_range, w_range, n_samples)\n","        B = np.linspace(-b_range, b_range, n_samples)\n","        w, b = np.meshgrid(W, B)    \n","        Z = np.zeros((30, 30))\n","        count1 = 0\n","        self.y = Y.numpy()\n","        self.x = X.numpy()\n","        for w1, b1 in zip(w, b):\n","            count2 = 0\n","            for w2, b2 in zip(w1, b1):\n","                Z[count1, count2] = np.mean((self.y - w2 * self.x + b2) ** 2)\n","                count2 += 1\n","            count1 += 1\n","        self.Z = Z\n","        self.w = w\n","        self.b = b\n","        self.W = []\n","        self.B = []\n","        self.LOSS = []\n","        self.n = 0\n","        if go == True:\n","            plt.figure()\n","            plt.figure(figsize = (7.5, 5))\n","            plt.axes(projection = '3d').plot_surface(self.w, self.b, self.Z, rstride = 1, cstride = 1, cmap = 'viridis', edgecolor = 'none')\n","            plt.title('Loss Surface')\n","            plt.xlabel('w')\n","            plt.ylabel('b')\n","            plt.show()\n","            plt.figure()\n","            plt.title('Loss Surface Contour')\n","            plt.xlabel('w')\n","            plt.ylabel('b')\n","            plt.contour(self.w, self.b, self.Z)\n","            plt.show()\n","            \n","     # Setter\n","    def set_para_loss(self, W, B, loss):\n","        self.n = self.n + 1\n","        self.W.append(W)\n","        self.B.append(B)\n","        self.LOSS.append(loss)\n","    \n","    # Plot diagram\n","    def final_plot(self): \n","        ax = plt.axes(projection = '3d')\n","        ax.plot_wireframe(self.w, self.b, self.Z)\n","        ax.scatter(self.W, self.B, self.LOSS, c = 'r', marker = 'x', s = 200, alpha = 1)\n","        plt.figure()\n","        plt.contour(self.w, self.b, self.Z)\n","        plt.scatter(self.W, self.B, c = 'r', marker = 'x')\n","        plt.xlabel('w')\n","        plt.ylabel('b')\n","        plt.show()\n","    \n","    # Plot diagram\n","    def plot_ps(self):\n","        plt.subplot(121)\n","        plt.ylim()\n","        plt.plot(self.x, self.y, 'ro', label = \"training points\")\n","        plt.plot(self.x, self.W[-1] * self.x + self.B[-1], label = \"estimated line\")\n","        plt.xlabel('x')\n","        plt.ylabel('y')\n","        plt.title('Data Space Iteration: '+ str(self.n))\n","        plt.subplot(122)\n","        plt.contour(self.w, self.b, self.Z)\n","        plt.scatter(self.W, self.B, c = 'r', marker = 'x')\n","        plt.title('Loss Surface Contour')\n","        plt.xlabel('w')\n","        plt.ylabel('b')\n","        plt.show()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"buUyOD6XX7O7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"3b0a403a-822f-432c-cb5c-13f8f15a1361","executionInfo":{"status":"ok","timestamp":1578524215661,"user_tz":480,"elapsed":2968,"user":{"displayName":"Abhishek Srivastava","photoUrl":"","userId":"04880920049240120907"}}},"source":["import torch\n","torch.manual_seed(1)"],"execution_count":2,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<torch._C.Generator at 0x7f5b9565e230>"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"code","metadata":{"id":"hJNl7v_cYAwT","colab_type":"code","colab":{}},"source":["from torch.utils.data import Dataset, DataLoader"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"INEIYeHHYN2a","colab_type":"code","colab":{}},"source":["class Data(Dataset):\n","  def __init__(self):\n","    self.X = torch.arange(-3,3,0.1).view(-1,1)\n","    self.Y = 1 * self.X -1\n","    self.len = self.X.shape[0]\n","  def __getitem__(self,index):\n","    return self.X[index],self.Y[index]\n","  \n","  def __len__(self):\n","    return self.len"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zSPu2Q19Yn3q","colab_type":"code","colab":{}},"source":["dataset = Data()\n","trainLoader = DataLoader(dataset=dataset,batch_size=5)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"b-mVBj6daXi3","colab_type":"code","colab":{}},"source":["get_surface = plot_error_surfaces(15, 13, X, Y, 30, go = False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lRqNOd5SZg4w","colab_type":"code","colab":{}},"source":["def forward(x):\n","  return w *x + bm"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"3Y55RAHiZmmA","colab_type":"code","colab":{}},"source":["def criterion(yhat,y):\n","  return torch.mean((yhat-y)**2)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_v_SAixQY0MZ","colab_type":"code","colab":{}},"source":["w = torch.tensor(-15.,requires_grad=True)\n","b = torch.tensor(-10.,requires_grad=True)\n","\n","LOSS_MBGD = []\n","lr = 0.1\n","\n","def train_model_MBGD(iter):\n","  for epoch in range(iter):\n","    for x, y in trainLoader:\n","      yhat = forward(x)\n","      loss = criterion(yhat,y)\n","      #get_surface.set_para_loss(w.data.tolist(), b.data.tolist(), loss.tolist())\n","      loss.backward()\n","\n","      w.data = w.data - lr * w.grad.data\n","      b.data = b.data - lr * b.grad.data\n","\n","      w.grad.data.zero_()\n","      b.grad.data.zero_()\n","\n","      print(\"Current Loss: \",loss)\n","    \n","    #get_surface.plot_ps()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gcaNs3nVaMwH","colab_type":"code","colab":{}},"source":["train_model_MBGD(15)"],"execution_count":0,"outputs":[]}]}